#edit-mode: -*- python -*-
#coding:gbk

#工作路径. 如果高版本gcc 需要修改两个路径 设置好TOOLCHAIN_ROOT
WORKROOT('../../../../../../../')
TOOLCHAIN_ROOT='../../../../../../../ps/se/toolchain'
RELATIVE_PATH='./'

LEVEL=3
GCC_LOCAL=2
print 'GCC_LOCAL: %d'%GCC_LOCAL 
GCC_DYNAMIC=1
print 'GCC_DYNAMIC: %d'%GCC_DYNAMIC

GCC_HIGH=1
print 'GCC_HIGH: %d'%GCC_HIGH
GCC_VERSION='3.4.5'
if  GCC_HIGH == 1: 
	if GCC_DYNAMIC == 1:
		GCC_VERSION='4.8.1'
	else:
		GCC_VERSION='4.8.2'
GLIBC_VERSION='2.9'
BINUTILS_VERSION='2.20'
KERNAL_VERSION='2.6.32'

#使用硬链接copy.
CopyUsingHardLink(True)

GCC_FLAGS = '' 
TOOLCHAIN=TOOLCHAIN_ROOT
if GCC_HIGH  == 1:
	if GCC_DYNAMIC == 1:	
		TOOLCHAIN += '/x86_64-unknown-linux-gnu-%s-%s-%s-%s'%(GCC_VERSION,GLIBC_VERSION,BINUTILS_VERSION,KERNAL_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/x86_64-unknown-linux-gnu-g++'
	else:
		TOOLCHAIN += '/gcc_only_%s'%(GCC_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/g++'
#对于static方式 LIBS_DIR不起任何作用
LIBS_DIR=TOOLCHAIN + '/x86_64-unknown-linux-gnu/lib/'

print 'LIBS_DIR: %s'%LIBS_DIR

if GCC_LOCAL == 1:
	GCC_BIN = 'g++'
elif GCC_LOCAL == 2:
	GCC_BIN = '/opt/compiler/gcc-4.8.2/bin/g++'
print 'GCC_BIN: %s'%GCC_BIN
CC(GCC_BIN)
CXX(GCC_BIN)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')

#编译参数设置
COMMON_FLAGS = '-g -O%d -pipe -W -Wall -fPIC -DHAVE_NETINET_IN_H -Wno-unused-parameter -Wno-deprecated'%LEVEL

if GCC_HIGH  == 1:
	GCC_FLAGS += '-std=c++11 -fpermissive -Wno-write-strings -Wno-literal-suffix -Wno-unused-local-typedefs'
	if GCC_DYNAMIC  == 1:
		GCC_FLAGS += ' -fopenmp'

perf_flags = ' -mfpmath=sse -msse -msse2 -msse3'
#C编译参数.
CFLAGS(COMMON_FLAGS, GCC_FLAGS, perf_flags)

#C++编译参数.
CXXFLAGS(COMMON_FLAGS, GCC_FLAGS, perf_flags)

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#链接参数.
GCC_LDFLAGS=''
if GCC_HIGH  == 1: 
	if GCC_DYNAMIC  == 1:
                GCC_LDFLAGS += ' -lgomp'
	else: 
		GCC_LDFLAGS  += ' -static-libgcc -static-libstdc++'

#链接参数.
#LDFLAGS('-lpthread -lcrypto -lrt -lssl -lldap -lcurl -ldl -rdynamic', GCC_LDFLAGS)
LDFLAGS('-lpthread', GCC_LDFLAGS)

#头文件路径.
#INCPATHS('./ ./include/ ./include/vowpalwabbit/ ./include/sofia/ ./include/blas/ ./include/liblinear/ ./include/libsvm/'.replace('./', RELATIVE_PATH))
INCPATHS('./ ./include/ ./include/LightGBM/'.replace('./', RELATIVE_PATH))

#使用库
#LIBS('./librsc-sender.a')

#依赖模块
#CONFIGS('third-64/zlib@base') #used in vowpalwabbit 


srcs = GLOB('./src/application/*.cpp ./src/boosting/*.cpp ./src/io/*.cpp ./src/metric/*.cpp ./src/objective/*.cpp ./src/network/*.cpp ./src/treelearner/*.cpp')
#if(USE_MPI)
#  find_package(MPI REQUIRED)
#    ADD_DEFINITIONS(-DUSE_MPI)
#      MESSAGE(${MPI_LIBRARIES})
#        MESSAGE(${MPI_CXX_LIBRARIES})
#      else()
#        ADD_DEFINITIONS(-DUSE_SOCKET)
#        endif()
StaticLibrary('lightgbm',Sources(srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG -DUSE_SOCKET')))

